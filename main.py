# -*- coding: utf-8 -*-
"""python_practice_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7tfY8JIzJ9fXvpJbx1TnHvSJlH4pNAM

# I. Functions. Arguments.

0. (5б) Назвіть 4 частини, з яких складається визначення функції.
"""

def example_function(parameter1, parameter2):
    # Тіло функції
    result = parameter1 + parameter2
    return result

"""1. (4б) Визначте функцію, що приймає 2 аргументи та повертає результат ділення 1го аргумента на інший."""

def divide_numbers(a, b):
    # Перевірка на ділення на нуль
    if b == 0:
        return "Помилка: Ділення на нуль неможливе"

    # Виконання ділення
    result = a / b
    return result

"""2. (2б) Викличте вище визначену функцію, де другий аргумент дорівнює 0."""

result = divide_numbers(10, 0)
print(result)

"""3. (6б) Перевизначте функцію так, щоби у випадку ділення на 0 функція повертала None, а в решті випадків - результат розрахунків."""

def divide_numbers(a, b):
    if b == 0:
        return None
    else:
        return a / b

"""4. (5б) Напишіть документацію (docstring) у форматі Google до функції, що має обчислювати суму двох чисел."""

def calculate_sum(a, b):
    """
    Обчислює суму двох чисел.

    Args:
        a (int or float): Перше число.
        b (int or float): Друге число.

    Returns:
        int or float: Сума чисел a та b.
    """
    try:
        result = a + b
        return result
    except TypeError:
        raise TypeError("Both arguments must be numbers.")

"""5. (4б) Реалізуйте цю функцію (із додаванням docstring у визначення функції)."""

def calculate_sum(a, b):
    """
    Обчислює суму двох чисел.

    Args:
        a (int or float): Перше число.
        b (int or float): Друге число.

    Returns:
        int or float: Сума чисел a та b.

    Raises:
        TypeError: Якщо a або b не є числом.
    """
    try:
        result = a + b
        return result
    except TypeError:
        raise TypeError("Both arguments must be numbers.")

"""6. (6б) Визначте функцію, що віднімає одне число від іншого (підказка: це буде 2 аргументи функції). При чому, якщо не визначити, скільки саме має бути віднято від числа, за замовчуванням має відніматися 1. Викличте функцію, передаючи тільки один аргумент."""

def subtract_numbers(a, b=1):
    """
    Віднімає одне число від іншого.

    Args:
        a (int or float): Перше число.
        b (int or float, optional): Друге число, яке віднімається від першого. За замовчуванням 1.

    Returns:
        int or float: Різниця чисел a та b.

    Raises:
        TypeError: Якщо a або b не є числом.
    """
    try:
        result = a - b
        return result
    except TypeError:
        raise TypeError("Both arguments must be numbers.")

# Виклик функції з одним аргументом (за замовчуванням віднімається 1)
result = subtract_numbers(10)
print(result)  # Виведе: 9

"""7. (10б) Визначте функцію, яка приймає iterable (ітерабельний обʼєкт, напр. список), що складається з 7ми рядкових значень - назв погодних умов (напр. "sunny") за кожен день у тижні. Повертає функція словник, де ключами є рядки з погодними умовами, а значеннями - кількість разів, скільки дана погода була протягом тижня (напр. {'sunny': 1, ...})."""

def count_weather_conditions(weekly_weather):
    """
    Підраховує кількість кожної погодної умови протягом тижня.

    Args:
        weekly_weather (iterable of str): Ітерабельний об'єкт, що містить 7 рядкових значень погоди.

    Returns:
        dict: Словник, де ключами є рядки з погодними умовами, а значеннями - кількість разів, скільки дана погода була протягом тижня.
    """
    weather_count = {}
    for condition in weekly_weather:
        if condition in weather_count:
            weather_count[condition] += 1
        else:
            weather_count[condition] = 1
    return weather_count

# Приклад виклику функції
weekly_weather_conditions = ["sunny", "rainy", "sunny", "cloudy", "rainy", "sunny", "windy"]
result = count_weather_conditions(weekly_weather_conditions)
print(result)

"""8. (3б) Викличте цю функцію тричі з різними аргументами та виведіть результати на екран."""

# Перший виклик з різними погодними умовами
weekly_weather_conditions1 = ["sunny", "rainy", "sunny", "cloudy", "rainy", "sunny", "windy"]
result1 = count_weather_conditions(weekly_weather_conditions1)
print("Результат 1:", result1)

# Другий виклик з іншими погодними умовами
weekly_weather_conditions2 = ["rainy", "cloudy", "rainy", "cloudy", "sunny", "windy", "snowy"]
result2 = count_weather_conditions(weekly_weather_conditions2)
print("Результат 2:", result2)

# Третій виклик з іншими погодними умовами
weekly_weather_conditions3 = ["sunny", "sunny", "sunny", "sunny", "sunny", "sunny", "sunny"]
result3 = count_weather_conditions(weekly_weather_conditions3)
print("Результат 3:", result3)

"""9. (15б) Напишіть програму, яка б шукала необхідне число у **впорядкованому** списку цілочислених значень, де


1.   число має вводитись з консолі.
2.   власне алгоритм пошуку винесений в окрему функцію, яка повертає булеве значення (знайдено число - True, не знайдено - False).
3. в залежності від результату функції, виведіть на екран повідомлення про успішний або ж неуспішний пошук.


**Зауваження**: використовувати оператор **in** заборонено.
"""

def binary_search(sorted_list, target):
    left, right = 0, len(sorted_list) - 1

    while left <= right:
        mid = (left + right) // 2
        mid_value = sorted_list[mid]

        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

def main():
    # Введення впорядкованого списку цілих чисел
    input_list = input("Введіть впорядкований список чисел через пробіл: ").split()
    sorted_list = [int(item) for item in input_list]

    # Введення числа, яке шукаємо
    target = int(input("Введіть число, яке потрібно знайти: "))

    # Виклик функції пошуку
    result = binary_search(sorted_list, target)

    # Виведення результату
    if result:
        print(f"Число {target} знайдено в списку.")
    else:
        print(f"Число {target} не знайдено в списку.")

if __name__ == "__main__":
    main()

"""# II. Lambda functions.

10. (6б) Визначте анонімну функцію, що виконувала б завдання з задачі №1.
"""

add_numbers = lambda a, b: a + b

"""11. (5б) В яких випадках варто використовувати лямбда-функції?

Короткі та прості операції, Функції для передачі як аргумент, Визначення функцій у областях з обмеженим доступом, При потребі у визначенні анонімних функцій.

12. (9б) Визначте список з рядками. Після цього визначте анонімну функцію для отримання першого символу у верхньому регістрі для кожного рядка списку.
*Підказка*: використовуйте анонімну функцію в якості агрумента до вбудованої ф-ції, яка створена для застосування функцій над iterable обʼєктами.
Результат виведіть на екран у вигляді кортежу.
"""

# Визначення списку з рядками
string_list = ["apple", "banana", "cherry", "date"]

# Визначення анонімної функції для отримання першого символу у верхньому регістрі
uppercase_first_char = lambda s: s[0].upper()

# Застосування функції до кожного елемента списку за допомогою map
result_tuple = tuple(map(uppercase_first_char, string_list))

# Виведення результату
print(result_tuple)

"""# III. Decorators.

13. (15б) Визначте декоратор, який би виводив у консоль повідомлення про початок роботи і назву функції, а після відпрацювання функції - повідомлення про закінчення роботи і назву функції, що задекорована.
"""

def my_decorator(func):
    def wrapper(*args, **kwargs):
        # Повідомлення про початок роботи функції
        print(f"Початок роботи функції {func.__name__}")

        # Виклик задекорованої функції
        result = func(*args, **kwargs)

        # Повідомлення про закінчення роботи функції
        print(f"Закінчення роботи функції {func.__name__}")

        # Повернення результату виклику функції
        return result

    return wrapper

# Використання декоратора
@my_decorator
def example_function():
    print("Це прикладна функція.")

# Виклик задекорованої функції
example_function()

"""14. (7б) Задекоруйте функції з завдання 3, 5 та 6 декоратором із завдання 13. *Примітка*: продемонструйте 2 способи, як можна задекорувати функції (**УВАГА**: не декоруйте функції двічі!)."""

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print(f"Початок роботи функції {func.__name__}")
        result = func(*args, **kwargs)
        print(f"Закінчення роботи функції {func.__name__}")
        return result
    return wrapper

# Декорування функції з завдання 3
@my_decorator
def divide_numbers(a, b):
    """
    Функція для ділення двох чисел.

    Параметри:
    a (int): Дільник.
    b (int): Дільник.

    Повертає:
    float або None: Результат ділення а на b або None, якщо b дорівнює 0.
    """
    if b == 0:
        return None
    return a / b

# Виклик декорованої функції з завдання 3
result = divide_numbers(10, 5)
print(result)

# Декорування функції з завдання 5
@my_decorator
def calculate_sum(a, b):
    """Функція для обчислення суми двох чисел."""
    return a + b

# Виклик декорованої функції з завдання 5
result = calculate_sum(7, 3)
print(result)

# Декорування функції з завдання 6
@my_decorator
def subtract_numbers(a, b=1):
    """Функція для віднімання одного числа від іншого."""
    return a - b

# Виклик декорованої функції з завдання 6
result = subtract_numbers(10)
print(result)

"""15. (2б) Викличте одну з задекорованих функцій і виведіть її результат на екран."""

# Виклик задекорованої функції divide_numbers
result = divide_numbers(8, 2)
print(result)

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""